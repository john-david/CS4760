head	1.7;
access;
symbols;
locks
	o1-david:1.7; strict;
comment	@ * @;


1.7
date	2018.02.17.18.25.14;	author o1-david;	state Exp;
branches;
next	1.6;

1.6
date	2018.02.17.03.28.37;	author o1-david;	state Exp;
branches;
next	1.5;

1.5
date	2018.02.15.18.32.51;	author o1-david;	state Exp;
branches;
next	1.4;

1.4
date	2018.02.15.02.15.43;	author o1-david;	state Exp;
branches;
next	1.3;

1.3
date	2018.02.11.21.41.16;	author o1-david;	state Exp;
branches;
next	1.2;

1.2
date	2018.02.11.04.45.22;	author o1-david;	state Exp;
branches;
next	1.1;

1.1
date	2018.02.10.22.09.43;	author o1-david;	state Exp;
branches;
next	;


desc
@early stage development for main.c
spawns 1 producer and n consumers
exits with ctrl^c and alarm(100)
logs pids into array for eventual kill
@


1.7
log
@added some more memory control
still appears to fail to detach from shared memory
@
text
@

/*
 * John David
 * CS 4760
 * Assignment 2
*/


#include "utility.h"

/*

#include <sys/mman.h>
#include <unistd.h>
#include <stdio.h>
#include <time.h>
#include <signal.h>
#include <string.h>
#include <stdlib.h>
#include <errno.h>
#include <sys/wait.h>

*/

/* variables to keep track of consumers */

#define MAX_PIDS 20
//#define KEY_CODE 1234

static int num_consumers;

volatile pid_t *pids;
volatile pid_t producer_pid;

static void  INThandler(int sig)
{
	int signal_check;
	fprintf(stderr, "\nctrl^c signal received. exiting program. \n");
	
	/* code to clean up */
	

	/* killing the producer */
	signal_check = kill(producer_pid, SIGINT);
	
	if(signal_check == 0)
		fprintf(stderr, "The producer is terminating via kill..\n");

	int c;
	/* killing the children */
	for (c = 0; c < num_consumers; c++) {
   		fprintf(stderr, "killing child number %d PID: %d \n", c + 1, pids[c]);
		signal_check = kill(pids[c], SIGINT);
        
		while(signal_check != 0){
			fprintf(stderr, "waiting on child number %d PID: %d \n", c + 1, pids[c]);
			waitpid(-1, NULL, WNOHANG);
		}

        	if(signal_check == 0)
                	fprintf(stderr, "finished killing child number %d PID: %d \n", c + 1, pids[c]);
  	}

	exit(EXIT_SUCCESS);
}

static void ALARMhandler(int sig)
{
    	fprintf(stderr, "\n100 Seconds has expired. \n");

	/* code to clean up */

	int signal_check;
        /* killing the producer */
        signal_check = kill(producer_pid, SIGTERM);

        if(signal_check == 0)
                fprintf(stderr, "The producer is closing normally..\n");

        int c;
        /* killing the children */
        for (c = 0; c < num_consumers; c++) {
                fprintf(stderr, "killing child number %d PID: %d \n", c + 1, pids[c]);
                signal_check = kill(pids[c], SIGTERM);
		
		while(signal_check != 0){
                        fprintf(stderr, "waiting on child number %d PID: %d \n", c + 1, pids[c]);
                        waitpid(-1, NULL, WNOHANG);
                }

		
                if(signal_check == 0)
                        fprintf(stderr, "finished killing child number %d PID: %d \n", c + 1, pids[c]);
        }




    	exit(EXIT_SUCCESS);
}

int main(int argc, char *argv[]){

	/* shared memory section for bounded buffer array, per assignment using shmget */

	char my_string[200];


	/* shared memory section for multiple consumers, for variety using new mmap std  */


	int smem_id;
	key_t smem_key = ftok("data.input", 1);
	if ( 0 > smem_key ){
       		perror("ftok"); /*Displays the error message*/
       		/*Error handling. Return with some error code*/
    	}
    	else 
	/* This is not needed, just for success message*/
    	{
       		printf("ftok success\n");
    	}



    	//key_t smem_key = KEY_CODE;
    	void *temp_ptr = (void *)0;
    	struct shared_mem_struct *shared_mem;

	if((smem_id = shmget(smem_key, sizeof(struct shared_mem_struct), IPC_CREAT | 0777))<0){   

		// if shmget fails
	        perror("shmget");
	        exit(EXIT_FAILURE);
	}

	/* Attaching the shared memory to data space */
	if((temp_ptr = shmat(smem_id, (void *)0, 0)) == (void *)-1){   
		
	        perror("shmat");
	        exit(EXIT_FAILURE);
	}
	else if (shmctl(smem_id , IPC_RMID , 0) == -1)
    	{
        	perror("smem_id");
    	}
		
	shared_mem = (struct shared_mem_struct *) temp_ptr;
        
	//shared_mem->proc_id = 0;  	
	//shared_mem->flag[0] = WANT_IN;

	//fprintf(stderr, "\n\nproc_id: %d flag %d", shared_mem->proc_id, shared_mem->flag[0] );
	//strcpy(shared_mem->bounded_buffer[2], "\nhello, I'm a string");

	

	fprintf(stderr, "\nbuffer: %s ", shared_mem->bounded_buffer[2]);	
	
	int consumers;

	pid_t pid;
	
	pids = mmap(0, MAX_PIDS*sizeof(pid_t), PROT_READ|PROT_WRITE,
              MAP_SHARED | MAP_ANONYMOUS, -1, 0);
  	
	if (!pids) {
    		perror("mmap failed");
    		exit(1);
	}
	memset((void *)pids, 0, MAX_PIDS*sizeof(pid_t));


	if (argc != 2){

		fprintf(stderr, "Usage: %s number_of_consumers\n", argv[0]);
		perror("Error: improper usage >> exiting program >>\n");
		exit(EXIT_SUCCESS);
	}

	consumers = atoi(argv[1]);
	//num_consumers = 0;
	num_consumers = consumers;	

	if (consumers >= 20){
		fprintf(stderr, "The number of consumers cannot exceed 20.\n");
		perror("Error: improper usage >> exiting program >> \n");
		exit(EXIT_SUCCESS);
	}	


	/* setting up signal handler to exit upon receipt of ctrl^c */
	signal(SIGINT, INThandler);

	/* start producer */

	int z;


	for(z = 0; z < 21; z++){
                //fprintf(stderr, "\n %d setting flags to IDLE ", z);
                shared_mem->flag[z] = IDLE;
        }

	sprintf(my_string, "empty");

	for(z= 0; z < 5; z++){
		fprintf(stderr, "\n %d setting bounded buffer ", z);
		memcpy(shared_mem->bounded_buffer[z], "", strlen(""));
		fprintf(stderr, "\n %s \n", shared_mem->bounded_buffer[z]);
	}	

	char parameter[32];
	char parameter2[32];
	char parameter3[32];
	char parameter4[32];
	
	int total_processes = num_consumers + 1;

	sprintf(parameter4, "%d", total_processes);
	sprintf(parameter, "%d", num_consumers + 1);
	sprintf(parameter2," %d", smem_key);
	sprintf(parameter3," %d", smem_id);

	pid = fork();
	
	if(pid == 0){

		char *args[] = {"./producer", parameter, parameter2, parameter3, NULL}; /* each element represents a command line argument */

                fprintf(stderr, "About to start the producer \n");
                execvp(args[0], args);
                /* if we reach this point, exec has failed */
                perror("execvp failed\n");
                exit(1);

	} else if (pid < 0) {
              	perror("fork failed\n");
        } else {
                producer_pid = pid;
                sleep(1);
        }



        //char parameter[32];
        //sprintf(parameter, "%d", i);	

	/* start consumers */
	int c;
	for (c = 0; c < consumers; c++) {
    		
		pid = fork();
    		
		if (pid == 0) {

			sprintf(parameter, "%d", c + 1);			

			char *args[] = {"./consumer", parameter, parameter2, parameter3, parameter4,  NULL};	/* each element represents a command line argument */

			fprintf(stderr, "About to start consumer # %d \n", c + 1);
			execvp(args[0], args);
			/* if we reach this point, exec has failed */
			perror("execvp failed\n");		
			exit(1);	
      			
    		} else if (pid < 0) {
      			perror("fork failed\n");
    		} else {
			pids[c] = pid;
      			sleep(1);
    		}
  	}


	/* setting up 100 second timer */
        fprintf(stderr, "\nMaster: starting 100 second countdown clock\n");
        signal(SIGALRM, ALARMhandler);

	alarm(20);
	int counter = 100;
	
	pid_t ppid;
	ppid = getpid();

	/* place holder for while loop with sleep(1) counting down */
	
	fprintf(stderr, "\ni'm the parent process, my pid is %d", ppid);

	// wait(0); 
	while (1) {
		int status;
		pid_t done = wait( &status );
		if ( done == -1 )
			break; // no more children
	}



	/* remove shared memory and clean up */
	
	fprintf(stderr, "\nCleaning up and removing shared memory segments.\n");

        
	/* deatach the shared memory */
        if(shmdt(shared_mem) == -1)
        {
            perror("shmdt\n");
            exit(EXIT_FAILURE);
        }

        /* Remove the deatached shared memory */
        if(shmctl(smem_id, IPC_RMID, 0) == -1)
        {
            perror("shmctl\n");
            exit(EXIT_FAILURE);
        }

	char command[50];

   	strcpy(command, "./removeMem.sh" );
   	system(command);

	return 0;
}
@


1.6
log
@finally got shared memory working correctly.
@
text
@d86 5
d92 1
a108 18
	/* state */
	//shmid1 = shmget(k1, sizeof(int), IPC_CREAT | 0660);
	/* turn */
	//shmid2 = shmget(k2, sizeof(int), IPC_CREAT | 0660);
	/* bounded buffer */
	//shmid3 = shmget(IPC_PRIVATE, sizeof(array), IPC_CREAT | 0660); //shmget(k3, sizeof(char *) * BUFFERSIZE, IPC_CREAT | 0660);
	/* flag[n] */
	//shmid4 = shmget(k4, sizeof(int) * 20, IPC_CREAT | 0660); 

	//if (shmid1 < 0 || shmid2 < 0 || shmid3 < 0 || shmid4 < 0) {
        //	perror("Main shmget error: ");
        //	exit(1);
    	//}

	/* initialize bounded buffer */
	//char *SHM3[BUFFERSIZE];

	//char** SHM3 = shmat(shmid3, NULL, 0);
d144 4
d151 2
a152 2
	shared_mem->proc_id = 0;  	
	shared_mem->flag[0] = WANT_IN;
d154 4
a157 2
	fprintf(stderr, "\n\nproc_id: %d flag %d", shared_mem->proc_id, shared_mem->flag[0] );
	strcpy(shared_mem->bounded_buffer[2], "\nhello, I'm a string");
d200 1
d202 1
a202 1
                fprintf(stderr, "\n %d setting flags to IDLE ", z);
d206 8
d217 3
d221 1
d224 1
a224 1
	sprintf(parameter3," %d", smem_key);
d260 1
a260 1
			char *args[] = {"./consumer", parameter, parameter2, parameter3, NULL};	/* each element represents a command line argument */
d278 1
a278 2
	fprintf(stderr, "\nmain program starting computation\n");
        fprintf(stderr, "\nstarting 100 second countdown clock\n");
d281 1
a281 1
	alarm(100);
d320 4
a323 1
	
@


1.5
log
@updated version
@
text
@d70 1
a70 1
    	printf("100 Seconds has expired. \n");
d162 2
a163 2
	fprintf(stderr, "proc_id: %d flag %d", shared_mem->proc_id, shared_mem->flag[0] );
	strcpy(shared_mem->bounded_buffer[2], "hello, I'm a string");
d165 1
a165 1
	fprintf(stderr, "buffer: %s ", shared_mem->bounded_buffer[2]);	
d184 1
a184 1
		perror("Error: improper usage >> exiting program >>");
d193 2
a194 2
		fprintf(stderr, "The number of consumers cannot exceed 20.");
		perror("Error: improper usage >> exiting program >>");
d203 16
a218 1
	
d223 1
a223 1
		char *args[] = {"./producer", NULL}; /* each element represents a command line argument */
d228 1
a228 1
                perror("execvp failed");
d232 1
a232 1
              	perror("fork failed");
d240 1
a240 1
        char parameter[32];
d253 1
a253 1
			char *args[] = {"./consumer", parameter, NULL};	/* each element represents a command line argument */
d258 1
a258 1
			perror("execvp failed");		
d262 1
a262 1
      			perror("fork failed");
d271 2
a272 2
	fprintf(stderr, "main program starting computation\n");
        fprintf(stderr, "starting 100 second countdown clock\n");
d277 3
a279 1
	while(1){
d281 3
a283 3
		fprintf(stderr, "counting down %d \n", counter); 
		counter--;
		sleep(1);
d285 6
d293 2
d297 1
a297 1
	fprintf(stderr, "Cleaning up and removing shared memory segments.");
d303 1
a303 1
            perror("shmdt");
d310 1
a310 1
            perror("shmctl");
@


1.4
log
@shared memory segment built and tested. 
shared memory struct needs to be built into consumer and producer
while loop neeeds construction and testing
@
text
@d29 1
a29 1
#define KEY_CODE 1234
a123 1
	struct shared_mem_struct{
d125 12
a136 4
		int proc_id;
                int flag[21];
                int turn;
                char bounded_buffer[5][200];
a137 1
	};
d139 1
a139 2
	int smem_id;
    	key_t smem_key = KEY_CODE;
d143 1
a143 1
	if((smem_id = shmget(smem_key, sizeof(struct shared_mem_struct), IPC_CREAT | 0666))<0){   
a152 1
		// if shmat fails
a160 1
	//shared_mem->bounded_buffer[2] = "hello I'm a string.";
d274 16
a289 4
	shmctl(shmid1, IPC_RMID, NULL);
	shmctl(shmid2, IPC_RMID, NULL);
	shmctl(shmid3, IPC_RMID, NULL);
	shmctl(shmid4, IPC_RMID, NULL);
@


1.3
log
@added additonal signal ctrl
added time code components
still needs shared memory, etc.
@
text
@d9 5
d24 2
d27 1
d29 2
d99 65
d266 9
@


1.2
log
@added signal handling for main
@
text
@d21 2
a22 1
extern int num_consumers;
d32 4
a35 2
	fprintf(stderr, "killing the producer...\n");
	signal_check = kill(producer_pid, SIGTERM);
d38 16
a53 1
		fprintf(stderr, "The producer has closed.\n");
d64 20
d111 1
a111 1
	int num_consumers = 0;
@


1.1
log
@Initial revision
@
text
@d27 1
d31 5
@
